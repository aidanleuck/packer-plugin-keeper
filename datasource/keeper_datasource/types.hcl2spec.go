// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package keeper_datasource

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	Uid *string `mapstructure:"uid" required:"true" cty:"uid" hcl:"uid"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"uid": &hcldec.AttrSpec{Name: "uid", Type: cty.String, Required: false},
	}
	return s
}

// FlatFileRef is an auto-generated flat version of FileRef.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatFileRef struct {
	Uid          *string `mapstructure:"uid" cty:"uid" hcl:"uid"`
	Title        *string `mapstructure:"title" cty:"title" hcl:"title"`
	Name         *string `mapstructure:"name" cty:"name" hcl:"name"`
	Type         *string `mapstructure:"type" cty:"type" hcl:"type"`
	Size         *int    `mapstructure:"size" cty:"size" hcl:"size"`
	LastModified *int    `mapstructure:"last_modified" cty:"last_modified" hcl:"last_modified"`
	Base64Data   *string `mapstructure:"content_base64" cty:"content_base64" hcl:"content_base64"`
}

// FlatMapstructure returns a new FlatFileRef.
// FlatFileRef is an auto-generated flat version of FileRef.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*FileRef) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatFileRef)
}

// HCL2Spec returns the hcl spec of a FileRef.
// This spec is used by HCL to read the fields of FileRef.
// The decoded values from this spec will then be applied to a FlatFileRef.
func (*FlatFileRef) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"uid":            &hcldec.AttrSpec{Name: "uid", Type: cty.String, Required: false},
		"title":          &hcldec.AttrSpec{Name: "title", Type: cty.String, Required: false},
		"name":           &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"type":           &hcldec.AttrSpec{Name: "type", Type: cty.String, Required: false},
		"size":           &hcldec.AttrSpec{Name: "size", Type: cty.Number, Required: false},
		"last_modified":  &hcldec.AttrSpec{Name: "last_modified", Type: cty.Number, Required: false},
		"content_base64": &hcldec.AttrSpec{Name: "content_base64", Type: cty.String, Required: false},
	}
	return s
}

// FlatHostConnection is an auto-generated flat version of HostConnection.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatHostConnection struct {
	HostName *string `mapstructure:"host_name" cty:"host_name" hcl:"host_name"`
	Port     *int    `mapstructure:"port" cty:"port" hcl:"port"`
}

// FlatMapstructure returns a new FlatHostConnection.
// FlatHostConnection is an auto-generated flat version of HostConnection.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*HostConnection) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatHostConnection)
}

// HCL2Spec returns the hcl spec of a HostConnection.
// This spec is used by HCL to read the fields of HostConnection.
// The decoded values from this spec will then be applied to a FlatHostConnection.
func (*FlatHostConnection) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"host_name": &hcldec.AttrSpec{Name: "host_name", Type: cty.String, Required: false},
		"port":      &hcldec.AttrSpec{Name: "port", Type: cty.Number, Required: false},
	}
	return s
}

// FlatKeeperDataBaseCredentials is an auto-generated flat version of KeeperDataBaseCredentials.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatKeeperDataBaseCredentials struct {
	Uid            *string             `mapstructure:"uid" cty:"uid" hcl:"uid"`
	Type           *string             `mapstructure:"type" cty:"type" hcl:"type"`
	Title          *string             `mapstructure:"title" cty:"title" hcl:"title"`
	Notes          *string             `mapstructure:"notes" cty:"notes" hcl:"notes"`
	FileRefs       []FlatFileRef       `mapstructure:"file_refs" cty:"file_refs" hcl:"file_refs"`
	HostConnection *FlatHostConnection `mapstructure:"connection_details" cty:"connection_details" hcl:"connection_details"`
	Login          *string             `mapstructure:"login" cty:"login" hcl:"login"`
	Password       *string             `mapstructure:"password" cty:"password" hcl:"password"`
	DbType         *string             `mapstructure:"db_type" cty:"db_type" hcl:"db_type"`
}

// FlatMapstructure returns a new FlatKeeperDataBaseCredentials.
// FlatKeeperDataBaseCredentials is an auto-generated flat version of KeeperDataBaseCredentials.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*KeeperDataBaseCredentials) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatKeeperDataBaseCredentials)
}

// HCL2Spec returns the hcl spec of a KeeperDataBaseCredentials.
// This spec is used by HCL to read the fields of KeeperDataBaseCredentials.
// The decoded values from this spec will then be applied to a FlatKeeperDataBaseCredentials.
func (*FlatKeeperDataBaseCredentials) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"uid":                &hcldec.AttrSpec{Name: "uid", Type: cty.String, Required: false},
		"type":               &hcldec.AttrSpec{Name: "type", Type: cty.String, Required: false},
		"title":              &hcldec.AttrSpec{Name: "title", Type: cty.String, Required: false},
		"notes":              &hcldec.AttrSpec{Name: "notes", Type: cty.String, Required: false},
		"file_refs":          &hcldec.BlockListSpec{TypeName: "file_refs", Nested: hcldec.ObjectSpec((*FlatFileRef)(nil).HCL2Spec())},
		"connection_details": &hcldec.BlockSpec{TypeName: "connection_details", Nested: hcldec.ObjectSpec((*FlatHostConnection)(nil).HCL2Spec())},
		"login":              &hcldec.AttrSpec{Name: "login", Type: cty.String, Required: false},
		"password":           &hcldec.AttrSpec{Name: "password", Type: cty.String, Required: false},
		"db_type":            &hcldec.AttrSpec{Name: "db_type", Type: cty.String, Required: false},
	}
	return s
}

// FlatKeeperEncryptedNote is an auto-generated flat version of KeeperEncryptedNote.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatKeeperEncryptedNote struct {
	Uid      *string       `mapstructure:"uid" cty:"uid" hcl:"uid"`
	Type     *string       `mapstructure:"type" cty:"type" hcl:"type"`
	Title    *string       `mapstructure:"title" cty:"title" hcl:"title"`
	Notes    *string       `mapstructure:"notes" cty:"notes" hcl:"notes"`
	FileRefs []FlatFileRef `mapstructure:"file_refs" cty:"file_refs" hcl:"file_refs"`
	Note     *string       `mapstructure:"note" cty:"note" hcl:"note"`
	Date     *string       `mapstructure:"date" cty:"date" hcl:"date"`
}

// FlatMapstructure returns a new FlatKeeperEncryptedNote.
// FlatKeeperEncryptedNote is an auto-generated flat version of KeeperEncryptedNote.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*KeeperEncryptedNote) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatKeeperEncryptedNote)
}

// HCL2Spec returns the hcl spec of a KeeperEncryptedNote.
// This spec is used by HCL to read the fields of KeeperEncryptedNote.
// The decoded values from this spec will then be applied to a FlatKeeperEncryptedNote.
func (*FlatKeeperEncryptedNote) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"uid":       &hcldec.AttrSpec{Name: "uid", Type: cty.String, Required: false},
		"type":      &hcldec.AttrSpec{Name: "type", Type: cty.String, Required: false},
		"title":     &hcldec.AttrSpec{Name: "title", Type: cty.String, Required: false},
		"notes":     &hcldec.AttrSpec{Name: "notes", Type: cty.String, Required: false},
		"file_refs": &hcldec.BlockListSpec{TypeName: "file_refs", Nested: hcldec.ObjectSpec((*FlatFileRef)(nil).HCL2Spec())},
		"note":      &hcldec.AttrSpec{Name: "note", Type: cty.String, Required: false},
		"date":      &hcldec.AttrSpec{Name: "date", Type: cty.String, Required: false},
	}
	return s
}

// FlatKeeperFile is an auto-generated flat version of KeeperFile.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatKeeperFile struct {
	Uid      *string       `mapstructure:"uid" cty:"uid" hcl:"uid"`
	Type     *string       `mapstructure:"type" cty:"type" hcl:"type"`
	Title    *string       `mapstructure:"title" cty:"title" hcl:"title"`
	Notes    *string       `mapstructure:"notes" cty:"notes" hcl:"notes"`
	FileRefs []FlatFileRef `mapstructure:"file_refs" cty:"file_refs" hcl:"file_refs"`
}

// FlatMapstructure returns a new FlatKeeperFile.
// FlatKeeperFile is an auto-generated flat version of KeeperFile.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*KeeperFile) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatKeeperFile)
}

// HCL2Spec returns the hcl spec of a KeeperFile.
// This spec is used by HCL to read the fields of KeeperFile.
// The decoded values from this spec will then be applied to a FlatKeeperFile.
func (*FlatKeeperFile) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"uid":       &hcldec.AttrSpec{Name: "uid", Type: cty.String, Required: false},
		"type":      &hcldec.AttrSpec{Name: "type", Type: cty.String, Required: false},
		"title":     &hcldec.AttrSpec{Name: "title", Type: cty.String, Required: false},
		"notes":     &hcldec.AttrSpec{Name: "notes", Type: cty.String, Required: false},
		"file_refs": &hcldec.BlockListSpec{TypeName: "file_refs", Nested: hcldec.ObjectSpec((*FlatFileRef)(nil).HCL2Spec())},
	}
	return s
}

// FlatKeeperLogin is an auto-generated flat version of KeeperLogin.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatKeeperLogin struct {
	Uid      *string       `mapstructure:"uid" cty:"uid" hcl:"uid"`
	Type     *string       `mapstructure:"type" cty:"type" hcl:"type"`
	Title    *string       `mapstructure:"title" cty:"title" hcl:"title"`
	Notes    *string       `mapstructure:"notes" cty:"notes" hcl:"notes"`
	FileRefs []FlatFileRef `mapstructure:"file_refs" cty:"file_refs" hcl:"file_refs"`
	Login    *string       `mapstructure:"login" cty:"login" hcl:"login"`
	Password *string       `mapstructure:"password" cty:"password" hcl:"password"`
	Url      *string       `mapstructure:"url" cty:"url" hcl:"url"`
}

// FlatMapstructure returns a new FlatKeeperLogin.
// FlatKeeperLogin is an auto-generated flat version of KeeperLogin.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*KeeperLogin) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatKeeperLogin)
}

// HCL2Spec returns the hcl spec of a KeeperLogin.
// This spec is used by HCL to read the fields of KeeperLogin.
// The decoded values from this spec will then be applied to a FlatKeeperLogin.
func (*FlatKeeperLogin) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"uid":       &hcldec.AttrSpec{Name: "uid", Type: cty.String, Required: false},
		"type":      &hcldec.AttrSpec{Name: "type", Type: cty.String, Required: false},
		"title":     &hcldec.AttrSpec{Name: "title", Type: cty.String, Required: false},
		"notes":     &hcldec.AttrSpec{Name: "notes", Type: cty.String, Required: false},
		"file_refs": &hcldec.BlockListSpec{TypeName: "file_refs", Nested: hcldec.ObjectSpec((*FlatFileRef)(nil).HCL2Spec())},
		"login":     &hcldec.AttrSpec{Name: "login", Type: cty.String, Required: false},
		"password":  &hcldec.AttrSpec{Name: "password", Type: cty.String, Required: false},
		"url":       &hcldec.AttrSpec{Name: "url", Type: cty.String, Required: false},
	}
	return s
}

// FlatKeeperRecordField is an auto-generated flat version of KeeperRecordField.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatKeeperRecordField struct {
	Uid      *string       `mapstructure:"uid" cty:"uid" hcl:"uid"`
	Type     *string       `mapstructure:"type" cty:"type" hcl:"type"`
	Title    *string       `mapstructure:"title" cty:"title" hcl:"title"`
	Notes    *string       `mapstructure:"notes" cty:"notes" hcl:"notes"`
	FileRefs []FlatFileRef `mapstructure:"file_refs" cty:"file_refs" hcl:"file_refs"`
}

// FlatMapstructure returns a new FlatKeeperRecordField.
// FlatKeeperRecordField is an auto-generated flat version of KeeperRecordField.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*KeeperRecordField) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatKeeperRecordField)
}

// HCL2Spec returns the hcl spec of a KeeperRecordField.
// This spec is used by HCL to read the fields of KeeperRecordField.
// The decoded values from this spec will then be applied to a FlatKeeperRecordField.
func (*FlatKeeperRecordField) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"uid":       &hcldec.AttrSpec{Name: "uid", Type: cty.String, Required: false},
		"type":      &hcldec.AttrSpec{Name: "type", Type: cty.String, Required: false},
		"title":     &hcldec.AttrSpec{Name: "title", Type: cty.String, Required: false},
		"notes":     &hcldec.AttrSpec{Name: "notes", Type: cty.String, Required: false},
		"file_refs": &hcldec.BlockListSpec{TypeName: "file_refs", Nested: hcldec.ObjectSpec((*FlatFileRef)(nil).HCL2Spec())},
	}
	return s
}

// FlatKeeperSSHKey is an auto-generated flat version of KeeperSSHKey.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatKeeperSSHKey struct {
	Uid            *string             `mapstructure:"uid" cty:"uid" hcl:"uid"`
	Type           *string             `mapstructure:"type" cty:"type" hcl:"type"`
	Title          *string             `mapstructure:"title" cty:"title" hcl:"title"`
	Notes          *string             `mapstructure:"notes" cty:"notes" hcl:"notes"`
	FileRefs       []FlatFileRef       `mapstructure:"file_refs" cty:"file_refs" hcl:"file_refs"`
	Login          *string             `mapstructure:"login" cty:"login" hcl:"login"`
	Passphrase     *string             `mapstructure:"passphrase" cty:"passphrase" hcl:"passphrase"`
	KeyPair        *FlatKeyPair        `mapstructure:"key_pair" cty:"key_pair" hcl:"key_pair"`
	HostConnection *FlatHostConnection `mapstructure:"connection_details" cty:"connection_details" hcl:"connection_details"`
}

// FlatMapstructure returns a new FlatKeeperSSHKey.
// FlatKeeperSSHKey is an auto-generated flat version of KeeperSSHKey.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*KeeperSSHKey) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatKeeperSSHKey)
}

// HCL2Spec returns the hcl spec of a KeeperSSHKey.
// This spec is used by HCL to read the fields of KeeperSSHKey.
// The decoded values from this spec will then be applied to a FlatKeeperSSHKey.
func (*FlatKeeperSSHKey) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"uid":                &hcldec.AttrSpec{Name: "uid", Type: cty.String, Required: false},
		"type":               &hcldec.AttrSpec{Name: "type", Type: cty.String, Required: false},
		"title":              &hcldec.AttrSpec{Name: "title", Type: cty.String, Required: false},
		"notes":              &hcldec.AttrSpec{Name: "notes", Type: cty.String, Required: false},
		"file_refs":          &hcldec.BlockListSpec{TypeName: "file_refs", Nested: hcldec.ObjectSpec((*FlatFileRef)(nil).HCL2Spec())},
		"login":              &hcldec.AttrSpec{Name: "login", Type: cty.String, Required: false},
		"passphrase":         &hcldec.AttrSpec{Name: "passphrase", Type: cty.String, Required: false},
		"key_pair":           &hcldec.BlockSpec{TypeName: "key_pair", Nested: hcldec.ObjectSpec((*FlatKeyPair)(nil).HCL2Spec())},
		"connection_details": &hcldec.BlockSpec{TypeName: "connection_details", Nested: hcldec.ObjectSpec((*FlatHostConnection)(nil).HCL2Spec())},
	}
	return s
}

// FlatKeeperServerCredentials is an auto-generated flat version of KeeperServerCredentials.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatKeeperServerCredentials struct {
	Uid            *string             `mapstructure:"uid" cty:"uid" hcl:"uid"`
	Type           *string             `mapstructure:"type" cty:"type" hcl:"type"`
	Title          *string             `mapstructure:"title" cty:"title" hcl:"title"`
	Notes          *string             `mapstructure:"notes" cty:"notes" hcl:"notes"`
	FileRefs       []FlatFileRef       `mapstructure:"file_refs" cty:"file_refs" hcl:"file_refs"`
	HostConnection *FlatHostConnection `mapstructure:"connection_details" cty:"connection_details" hcl:"connection_details"`
	Login          *string             `mapstructure:"login" cty:"login" hcl:"login"`
	Password       *string             `mapstructure:"password" cty:"password" hcl:"password"`
}

// FlatMapstructure returns a new FlatKeeperServerCredentials.
// FlatKeeperServerCredentials is an auto-generated flat version of KeeperServerCredentials.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*KeeperServerCredentials) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatKeeperServerCredentials)
}

// HCL2Spec returns the hcl spec of a KeeperServerCredentials.
// This spec is used by HCL to read the fields of KeeperServerCredentials.
// The decoded values from this spec will then be applied to a FlatKeeperServerCredentials.
func (*FlatKeeperServerCredentials) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"uid":                &hcldec.AttrSpec{Name: "uid", Type: cty.String, Required: false},
		"type":               &hcldec.AttrSpec{Name: "type", Type: cty.String, Required: false},
		"title":              &hcldec.AttrSpec{Name: "title", Type: cty.String, Required: false},
		"notes":              &hcldec.AttrSpec{Name: "notes", Type: cty.String, Required: false},
		"file_refs":          &hcldec.BlockListSpec{TypeName: "file_refs", Nested: hcldec.ObjectSpec((*FlatFileRef)(nil).HCL2Spec())},
		"connection_details": &hcldec.BlockSpec{TypeName: "connection_details", Nested: hcldec.ObjectSpec((*FlatHostConnection)(nil).HCL2Spec())},
		"login":              &hcldec.AttrSpec{Name: "login", Type: cty.String, Required: false},
		"password":           &hcldec.AttrSpec{Name: "password", Type: cty.String, Required: false},
	}
	return s
}

// FlatKeeperSoftwareLicense is an auto-generated flat version of KeeperSoftwareLicense.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatKeeperSoftwareLicense struct {
	Uid            *string       `mapstructure:"uid" cty:"uid" hcl:"uid"`
	Type           *string       `mapstructure:"type" cty:"type" hcl:"type"`
	Title          *string       `mapstructure:"title" cty:"title" hcl:"title"`
	Notes          *string       `mapstructure:"notes" cty:"notes" hcl:"notes"`
	FileRefs       []FlatFileRef `mapstructure:"file_refs" cty:"file_refs" hcl:"file_refs"`
	LicenseNumber  *string       `mapstructure:"license_number" cty:"license_number" hcl:"license_number"`
	ActivationDate *string       `mapstructure:"activation_date" cty:"activation_date" hcl:"activation_date"`
	ExpirationDate *string       `mapstructure:"expiration_date" cty:"expiration_date" hcl:"expiration_date"`
}

// FlatMapstructure returns a new FlatKeeperSoftwareLicense.
// FlatKeeperSoftwareLicense is an auto-generated flat version of KeeperSoftwareLicense.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*KeeperSoftwareLicense) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatKeeperSoftwareLicense)
}

// HCL2Spec returns the hcl spec of a KeeperSoftwareLicense.
// This spec is used by HCL to read the fields of KeeperSoftwareLicense.
// The decoded values from this spec will then be applied to a FlatKeeperSoftwareLicense.
func (*FlatKeeperSoftwareLicense) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"uid":             &hcldec.AttrSpec{Name: "uid", Type: cty.String, Required: false},
		"type":            &hcldec.AttrSpec{Name: "type", Type: cty.String, Required: false},
		"title":           &hcldec.AttrSpec{Name: "title", Type: cty.String, Required: false},
		"notes":           &hcldec.AttrSpec{Name: "notes", Type: cty.String, Required: false},
		"file_refs":       &hcldec.BlockListSpec{TypeName: "file_refs", Nested: hcldec.ObjectSpec((*FlatFileRef)(nil).HCL2Spec())},
		"license_number":  &hcldec.AttrSpec{Name: "license_number", Type: cty.String, Required: false},
		"activation_date": &hcldec.AttrSpec{Name: "activation_date", Type: cty.String, Required: false},
		"expiration_date": &hcldec.AttrSpec{Name: "expiration_date", Type: cty.String, Required: false},
	}
	return s
}

// FlatKeyPair is an auto-generated flat version of KeyPair.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatKeyPair struct {
	PublicKey  *string `mapstructure:"public_key" cty:"public_key" hcl:"public_key"`
	PrivateKey *string `mapstructure:"private_key" cty:"private_key" hcl:"private_key"`
}

// FlatMapstructure returns a new FlatKeyPair.
// FlatKeyPair is an auto-generated flat version of KeyPair.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*KeyPair) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatKeyPair)
}

// HCL2Spec returns the hcl spec of a KeyPair.
// This spec is used by HCL to read the fields of KeyPair.
// The decoded values from this spec will then be applied to a FlatKeyPair.
func (*FlatKeyPair) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"public_key":  &hcldec.AttrSpec{Name: "public_key", Type: cty.String, Required: false},
		"private_key": &hcldec.AttrSpec{Name: "private_key", Type: cty.String, Required: false},
	}
	return s
}
